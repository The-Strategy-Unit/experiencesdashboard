---
title: "Sentiment script"
format: docx
output: 
  word_document:
    fig_width: 9
    fig_height: 6
echo : false
warning: false
# prefer-html: true
---

# Intro 

Below are some ideas on plot to include in the dashboard. The plot in section 3 is currently on the dashboard (for testing purpose). 
If it will be beneficial, we can add a sub-category selection option to go with any of the chart so users can drill down using the sub-categories.

Your comment will be appreciated. 

```{r include=FALSE}
## read in the data

pkgload::load_all(export_all = T)
library(magrittr)
library(dplyr)
# read data that mimic the (general) data
phase_2_db_data <- readRDS(here::here("tests/p2_db_data_template.rds")) %>%
  dplyr::mutate(across(c(category, super_category), ~ purrr::map(.x, rawToChar)))


trend_data <- function(data, group_col1, group_col2){
  data %>%
    dplyr::group_by(.data[[group_col1]], .data[[group_col2]]) %>%
    dplyr::summarize(n = length(unique(comment_id))) %>% 
    dplyr::mutate(percent = n / sum(n) * 100) %>% 
    dplyr::ungroup()
}

plot_trend_data <- function(data, x, y,
                            event_id, 
                            plot_title = "", 
                            xaxis_title = "",
                            yaxis_title = "",
                            yaxis.type = '-',
                            ...
                            ){
  
  data %>%
        plotly::plot_ly(
          x = x, 
          y = y,
          source = event_id,
          color = ~sentiment,
          hovertemplate = ~ paste(
            "Date:", date,
            "<br>Sentiment score:", sentiment,
            "<br>%total: ", round(percent, 1), "%",
            "<br>No. comments:", n
          ),
          ...
        )  %>% 
        plotly::config(
          modeBarButtons = list(list("toImage")),
          toImageButtonOptions = list(
            format = "png"
          )
        ) %>%
        plotly::layout(
          title = plot_title,
          xaxis = list(title = xaxis_title
                       # categoryorder = "total descending"
                       ),
          yaxis = list(title = yaxis_title, 
                       type =  yaxis.type,
                       # ticksuffix = "%" # to add % and reformat the numbers then use tickformat = "%"
                       ...
                       ),
          ...
        )
}

# read data that mimic the (sentiment) data
sentiment_table <- data.frame(
  comment_id = 1:nrow(phase_2_db_data),
  sentiment = sample(1:5, nrow(phase_2_db_data), replace = T)
)

event_id = 'plot1'
nhs_yellow = "#FAE100"
nhs_green <- "#009639"
nhs_red <- "#DA291C"

## join the general table to the sentiment table by comment_id

filter_data <- dplyr::left_join(
  phase_2_db_data,
  sentiment_table, 
  by ="comment_id")

```


```{r}
## Number of comments by sentiment score

# clicked_data <- calculate_table(filter_data, 'sentiment')
# 
# clicked_data %>%
#   dplyr::mutate(sentiment = as.factor(sentiment)) %>%
#         plotly::plot_ly(
#           x = ~n, y = ~ sentiment, #reorder(n,sentiment),
#           type = "bar",
#           color = ~sentiment,
#           colors = c('1' = nhs_red, '2' = nhs_red, '3' = nhs_yellow,
#                     '4' = nhs_green, '5' = nhs_green), #I("#005EB8"),
#           showlegend = FALSE,
#           source = event_id,
#           hovertemplate = ~ paste(
#             "Score:", sentiment,
#             "<br>%total: ", percent,
#             "<br>Number of Comments:", n
#           )
#         )  %>% 
#         plotly::config(
#           modeBarButtons = list(list("toImage")),
#           toImageButtonOptions = list(
#             format = "png"
#           )
#         ) %>%
#         plotly::layout(
#           title = "Number of comments by sentiment score",
#           xaxis = list(title = "Number of comments"
#                        # categoryorder = "total descending"
#                        ),
#           yaxis = list(title = "Sentiment score")
        # )
```


## 1. Sentiment vs FFT groups

```{r include=FALSE}
#### Sentiment grouped by fft score 

new_clicked_data <- filter_data |>
  dplyr::filter(fft < 6) |>
  get_tidy_filter_data(TRUE) |>
  multigroup_calculated_data('fft', 'sentiment')

new_clicked_data %>%
  dplyr::mutate(#fft = as.factor(fft),
                sentiment = as.factor(sentiment)) %>%
        plotly::plot_ly(
          x = ~fft, y = ~ percent, #reorder(n,sentiment),
          type = "bar",
          color = ~sentiment,
          colors = c(nhs_red, nhs_yellow, nhs_green),
          source = event_id,
          hovertemplate = ~ paste(
            "Score:", sentiment,
            "<br>%total: ", percent, "%",
            "<br>Number of Comments:", n
          )
        )  %>% 
        plotly::config(
          modeBarButtons = list(list("toImage")),
          toImageButtonOptions = list(
            format = "png"
          )
        ) %>%
        plotly::layout(
          title = "%contribution of Sentiment grouped by fft score",
          xaxis = list(title = "fft score"
                       # categoryorder = "total descending"
                       ),
          yaxis = list(title = "% contribution",
                       ticksuffix = "%" ),
          barmode = 'stack'
        )
```

### Sentiment score group by fft score and category

The idea here is that users will be able to select using sub-categories of their choice and the plot will show for only that sub-categories. 

```{r}
selected_super_cat = 'Staff'

selected_sub_cat <- "Gratitude/ good experience"

new_clicked_data <- filter_data |>
  dplyr::filter(fft < 6) |>
  get_tidy_filter_data(TRUE) |>
  # dplyr::filter(super_category == selected_super_cat) |>
  dplyr::filter(category == selected_sub_cat) |>
  multigroup_calculated_data('fft', 'sentiment') |>
  dplyr::mutate(sentiment = get_sentiment_text(sentiment)) |>
  dplyr::mutate(
    sentiment = factor(sentiment, levels = c("Very Negative", "Negative", "Neutral", "Positive","Very Positive"))
    ) 

new_clicked_data %>%
  dplyr::mutate(#fft = as.factor(fft),
                sentiment = as.factor(sentiment)) %>%
        plotly::plot_ly(
          x = ~fft, y = ~ percent, #reorder(n,sentiment),
          type = "bar",
          color = ~sentiment,
          colors = c(nhs_red, nhs_yellow, nhs_green),
          source = event_id,
          hovertemplate = ~ paste(
            "Score:", sentiment,
            "<br>%total: ", round(percent), "%",
            "<br>Number of Comments:", n
          )
        )  %>% 
        plotly::config(
          modeBarButtons = list(list("toImage")),
          toImageButtonOptions = list(
            format = "png"
          )
        ) %>%
        plotly::layout(
          title = paste("%contribution of Sentiment grouped by fft score", selected_sub_cat),
          xaxis = list(title = "fft score"
                       # categoryorder = "total descending"
                       ),
          yaxis = list(title = "% contribution",
                       ticksuffix = "%" ),
          barmode = 'stack'
        )
```


## 2. Sentiment over time

```{r}
timeframe = 'month'
group_col1 <-  "date"
group_col2 <-  "sentiment"
timeframe = "month"
event_id = 'plot1'
plot_colors = c(nhs_red, nhs_yellow, nhs_green)

t_data <- filter_data |>
  get_tidy_filter_data(TRUE) |>
  dplyr::mutate(date = as.Date(cut(date, timeframe))) |>
  trend_data(group_col1, group_col2)
```

#### Comment sentiment over time
```{r include=FALSE}
if (max(filter_data$date) - min(filter_data$date) < 180){
  timeframe = 'week'
} else{
  timeframe = 'month'
}

filter_data |>
  get_tidy_filter_data(TRUE) |>
  dplyr::mutate(date = as.Date(cut(date, timeframe))) |>
  trend_data('date', 'sentiment') |>
  dplyr::mutate(sentiment = get_sentiment_text(sentiment)) |>
  dplyr::mutate(
    sentiment = factor(sentiment, levels = c("Very Negative", "Negative", "Neutral", "Positive","Very Positive"))
    ) |>
  plot_trend_data(
    x = ~date,
    y = ~percent,
    colors = plot_colors,
    event_id = event_id,  
    plot_title = "Sentiment score over time",
    xaxis_title = 'Date (Month)',
    yaxis_title = "% contribution",
    type = "bar",
    barmode = 'stack',
    ticksuffix = "%" )
```
#### comment sentiment grouped by fft score and categories

```{r}
selected_sub_cat <- "Gratitude/ good experience"
filter_data |>
  get_tidy_filter_data(TRUE) |>
  dplyr::mutate(date = as.Date(cut(date, timeframe))) |>
  dplyr::filter(category == selected_sub_cat) |>
  trend_data(group_col1, group_col2) |>
  dplyr::mutate(sentiment = get_sentiment_text(sentiment)) |>
  dplyr::mutate(
    sentiment = factor(sentiment, levels = c("Very Negative", "Negative", "Neutral", "Positive","Very Positive"))
    ) |>
  
  plot_trend_data(
    x = ~date,
    y = ~percent,
    colors = plot_colors,
    event_id = event_id,  
    plot_title = glue::glue("Sentiment score over ({selected_sub_cat}) sub-category"),
    xaxis_title = 'Date (Month)',
    yaxis_title = "% contribution",
    type = "bar",
    barmode = 'stack',
    ticksuffix = "%" )
```

### 3. scatter graph

```{r}
filter_data |>
  get_tidy_filter_data(TRUE) |>
  dplyr::mutate(date = as.Date(cut(date, timeframe))) |>
  trend_data(group_col1, group_col2) |>
  dplyr::mutate(sentiment = get_sentiment_text(sentiment)) |>
  dplyr::mutate(
    sentiment = factor(sentiment, levels = c("Very Negative", "Negative", "Neutral", "Positive","Very Positive"))
    ) |>
  plot_trend_data(y = ~sentiment, x = ~date,
          event_id =  event_id,
          plot_title = 'Sentiment over time',
          xaxis_title = 'Date (month)',
          yaxis_title = 'Sentiment value',
          size = ~n,
          colors = plot_colors,
          type = "scatter",
          mode = "markers",
          yaxis.type = 'category',
      symbol = I("square")
      )
```
